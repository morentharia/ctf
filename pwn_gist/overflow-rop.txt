0x8049356: ret
0x8049360: repz ret
0x80493a5: leave; ret
0x80492cd: pop ebx; ret
0x80494db: pop ebp; ret
0x804960a: inc ecx; ret
0x804935f: nop; repz ret
0x80493a4: adc cl,cl; ret
0x80493af: add bl,dh; ret
0x804947d: cld; leave; ret
0x8049354: sbb al,0x24; ret
0x804941a: add ecx,ecx; ret
0x8049609: adc al,0x41; ret
0x80493f6: es add bl,dh; ret
0x8049353: mov ebx,[esp]; ret
0x804935e: nop; nop; repz ret
0x80494da: pop edi; pop ebp; ret
0x80493ae: add [eax],al; repz ret
0x80495c8: add al,[edx-0x3b]; ret
0x80492b1: mov ebx,0x81000000; ret
0x8049352: hlt; mov ebx,[esp]; ret
0x804936f: nop; mov ebx,[esp]; ret
0x8049419: or [ecx],al; leave; ret
0x804941e: jbe 0x8049420; repz ret
0x80494de: jbe 0x80494e0; repz ret
0x80493a2: add esp,0x10; leave; ret
0x804947c: pop ebp; cld; leave; ret
0x80492ca: add esp,0x8; pop ebx; ret
0x804935d: xchg ax,ax; nop; repz ret
0x80493a3: les edx,[eax]; leave; ret
0x8049608: push cs; adc al,0x41; ret
0x80492cb: les ecx,[eax]; pop ebx; ret
0x804941d: lea esi,[esi+0x0]; repz ret
0x8049351: push esp; mov ebx,[esp]; ret
0x80493ad: add [eax],al; add bl,dh; ret
0x80493aa: mov esp,0x27; add bl,dh; ret
0x8049418: add al,0x8; add ecx,ecx; ret
0x80493f5: je 0x804941d; add bl,dh; ret
0x804947b: mov ebx,[ebp-0x4]; leave; ret
0x804935c: nop; xchg ax,ax; nop; repz ret
0x804936e: xchg ax,ax; mov ebx,[esp]; ret
0x80494d9: pop esi; pop edi; pop ebp; ret
0x8049414: mov ds:0x8049748,0x1; leave; ret
0x80492af: or al,ch; mov ebx,0x81000000; ret
0x80493a9: lea edi,[edi+eiz*1+0x0]; repz ret
0x80493f4: lea esi,[esi+eiz*1+0x0]; repz ret
0x80493a0: call eax; add esp,0x10; leave; ret
0x80493ed: call edx; add esp,0x10; leave; ret
0x8049607: inc edi; push cs; adc al,0x41; ret
0x8049606: and [edi+0xe],al; adc al,0x41; ret
0x804936d: nop; xchg ax,ax; mov ebx,[esp]; ret
0x8049415: add eax,0x8049748; add ecx,ecx; ret
0x80493ac: add [eax],al; add [eax],al; repz ret
0x804935b: xchg ax,ax; xchg ax,ax; nop; repz ret
0x80493a8: test [ebp+0x27bc],0x0; add bl,dh; ret
0x80492c8: add [eax],al; add esp,0x8; pop ebx; ret
0x80494d8: pop ebx; pop esi; pop edi; pop ebp; ret
0x804934d: call 0x8049300; hlt; mov ebx,[esp]; ret
0x80495c3: or eax,0x3834405; add al,[edx-0x3b]; ret
0x80493ab: daa; add [eax],al; add [eax],al; repz ret
0x80484de: jbe 0x80484e0 <__libc_csu_fini>; repz ret
0x80494ed: add ebx,0x123b; add esp,0x8; pop ebx; ret
0x80492c5: call 0x8049310; add esp,0x8; pop ebx; ret
0x804935a: nop; xchg ax,ax; xchg ax,ax; nop; repz ret
0x804936c: xchg ax,ax; xchg ax,ax; mov ebx,[esp]; ret
0x8049417: xchg edi,eax; add al,0x8; add ecx,ecx; ret
0x8049476: mov eax,0x0; mov ebx,[ebp-0x4]; leave; ret
0x80494d7: or al,0x5b; pop esi; pop edi; pop ebp; ret
0x80492ae: in al,dx; or al,ch; mov ebx,0x81000000; ret
0x8049479: add [eax],al; mov ebx,[ebp-0x4]; leave; ret
0x8049605: push cs; and [edi+0xe],al; adc al,0x41; ret
0x8049413: inc esi; add eax,0x8049748; add ecx,ecx; ret
0x804939e: add al,0x8; call eax; add esp,0x10; leave; ret
0x80493a7: mov esi,esi; lea edi,[edi+eiz*1+0x0]; repz ret
0x80493eb: add al,0x8; call edx; add esp,0x10; leave; ret
0x8049475: or [eax+0x0],bh; mov ebx,[ebp-0x4]; leave; ret
0x804936b: nop; xchg ax,ax; xchg ax,ax; mov ebx,[esp]; ret
0x804940f: call 0x8049380; mov ds:0x8049748,0x1; leave; ret
0x8049359: xchg ax,ax; xchg ax,ax; xchg ax,ax; nop; repz ret
0x80495c2: inc edx; or eax,0x3834405; add al,[edx-0x3b]; ret
0x804934c: push eax; call 0x8049300; hlt; mov ebx,[esp]; ret
0x804939b: push 0x8049748; call eax; add esp,0x10; leave; ret
0x80493e8: push 0x8049748; call edx; add esp,0x10; leave; ret
0x804841e: jbe 0x8048420 <__do_global_dtors_aux+32>; repz ret
0x8049416: dec eax; xchg edi,eax; add al,0x8; add ecx,ecx; ret
0x80494d6: les ecx,[ebx+ebx*2]; pop esi; pop edi; pop ebp; ret
0x80494d5: add esp,0xc; pop ebx; pop esi; pop edi; pop ebp; ret
0x8049604: dec ebp; push cs; and [edi+0xe],al; adc al,0x41; ret
0x8049603: xor [ebp+0xe],cl; and [edi+0xe],al; adc al,0x41; ret
0x8049358: nop; xchg ax,ax; xchg ax,ax; xchg ax,ax; nop; repz ret
0x804936a: xchg ax,ax; xchg ax,ax; xchg ax,ax; mov ebx,[esp]; ret
0x80494ef: cmp edx,[edx]; add [eax],al; add esp,0x8; pop ebx; ret
0x80483f5: je 0x804841d <__do_global_dtors_aux+29>; add bl,dh; ret
0x8049473: add esp,0x8; mov eax,0x0; mov ebx,[ebp-0x4]; leave; ret
0x80492c3: je 0x80492ca; call 0x8049310; add esp,0x8; pop ebx; ret
0x8049477: add [eax],al; add [eax],al; mov ebx,[ebp-0x4]; leave; ret
0x8049474: les ecx,[eax]; mov eax,0x0; mov ebx,[ebp-0x4]; leave; ret
0x80494e8: call 0x8049370; add ebx,0x123b; add esp,0x8; pop ebx; ret
0x80493ee: rol [ebx-0x3c36ef3c],cl; lea esi,[esi+eiz*1+0x0]; repz ret
0x8049369: nop; xchg ax,ax; xchg ax,ax; xchg ax,ax; mov ebx,[esp]; ret
0x804939d: xchg edi,eax; add al,0x8; call eax; add esp,0x10; leave; ret
0x80493ea: xchg edi,eax; add al,0x8; call edx; add esp,0x10; leave; ret
0x80493e7: push eax; push 0x8049748; call edx; add esp,0x10; leave; ret
0x8049357: xchg ax,ax; xchg ax,ax; xchg ax,ax; xchg ax,ax; nop; repz ret
0x8049602: push cs; xor [ebp+0xe],cl; and [edi+0xe],al; adc al,0x41; ret
0x804934a: add al,0x8; push eax; call 0x8049300; hlt; mov ebx,[esp]; ret
0x804940c: sub esp,0x8; call 0x8049380; mov ds:0x8049748,0x1; leave; ret
0x80492ab: add [ebx-0x7d],dl; in al,dx; or al,ch; mov ebx,0x81000000; ret
0x80482c5: call 0x8048310 <__gmon_start__@plt>; add esp,0x8; pop ebx; ret
0x804834d: call 0x8048300 <__libc_start_main@plt>; hlt; mov ebx,[esp]; ret
0x8049398: sub esp,0x14; push 0x8049748; call eax; add esp,0x10; leave; ret
0x80495c0: test [edx],eax; inc edx; or eax,0x3834405; add al,[edx-0x3b]; ret
0x8049368: xchg ax,ax; xchg ax,ax; xchg ax,ax; xchg ax,ax; mov ebx,[esp]; ret
0x80493ec: or bh,bh; rol [ebx-0x3c36ef3c],cl; lea esi,[esi+eiz*1+0x0]; repz ret
0x8049346: mov eax,0x8048436; push eax; call 0x8049300; hlt; mov ebx,[esp]; ret
0x80494d4: jecxz 0x8049459; les ecx,[ebx+ebx*2]; pop esi; pop edi; pop ebp; ret
0x80492c1: test eax,eax; je 0x80492ca; call 0x8049310; add esp,0x8; pop ebx; ret
0x80493a1: rol [ebx-0x3c36ef3c],1; mov esi,esi; lea edi,[edi+eiz*1+0x0]; repz ret
0x8049601: inc esp; push cs; xor [ebp+0xe],cl; and [edi+0xe],al; adc al,0x41; ret
0x8049349: test [eax+ecx*1],al; push eax; call 0x8049300; hlt; mov ebx,[esp]; ret
0x80494e5: sub esp,0x8; call 0x8049370; add ebx,0x123b; add esp,0x8; pop ebx; ret
0x804840f: call 0x8048380 <deregister_tm_clones>; mov ds:0x8049748,0x1; leave; ret
0x804946e: call 0x80492e0; add esp,0x8; mov eax,0x0; mov ebx,[ebp-0x4]; leave; ret
0x804834c: push eax; call 0x8048300 <__libc_start_main@plt>; hlt; mov ebx,[esp]; ret
0x8049348: test ss:[eax+ecx*1],al; push eax; call 0x8049300; hlt; mov ebx,[esp]; ret
0x80492a9: add al,0x0; add [ebx-0x7d],dl; in al,dx; or al,ch; mov ebx,0x81000000; ret
0x8049600: sub al,0x44; push cs; xor [ebp+0xe],cl; and [edi+0xe],al; adc al,0x41; ret
0x804940a: mov ebp,esp; sub esp,0x8; call 0x8049380; mov ds:0x8049748,0x1; leave; ret
0x80484d4: jecxz 0x8048459 <main+35>; les ecx,[ebx+ebx*2]; pop esi; pop edi; pop ebp; ret
0x804939f: or bh,bh; rol [ebx-0x3c36ef3c],1; mov esi,esi; lea edi,[edi+eiz*1+0x0]; repz ret
0x80484e8: call 0x8048370 <__x86.get_pc_thunk.bx>; add ebx,0x123b; add esp,0x8; pop ebx; ret
0x804840c: sub esp,0x8; call 0x8048380 <deregister_tm_clones>; mov ds:0x8049748,0x1; leave; ret
0x804846e: call 0x80482e0 <printf@plt>; add esp,0x8; mov eax,0x0; mov ebx,[ebp-0x4]; leave; ret
0x804834a: add al,0x8; push eax; call 0x8048300 <__libc_start_main@plt>; hlt; mov ebx,[esp]; ret
0x80482c3: je 0x80482ca <_init+30>; call 0x8048310 <__gmon_start__@plt>; add esp,0x8; pop ebx; ret
0x8048346: mov eax,0x8048436; push eax; call 0x8048300 <__libc_start_main@plt>; hlt; mov ebx,[esp]; ret
0x8048349: test [eax+ecx*1],al; push eax; call 0x8048300 <__libc_start_main@plt>; hlt; mov ebx,[esp]; ret
0x80484e5: sub esp,0x8; call 0x8048370 <__x86.get_pc_thunk.bx>; add ebx,0x123b; add esp,0x8; pop ebx; ret
0x8048348: test ss:[eax+ecx*1],al; push eax; call 0x8048300 <__libc_start_main@plt>; hlt; mov ebx,[esp]; ret
0x804840a: mov ebp,esp; sub esp,0x8; call 0x8048380 <deregister_tm_clones>; mov ds:0x8049748,0x1; leave; ret
0x80482c1: test eax,eax; je 0x80482ca <_init+30>; call 0x8048310 <__gmon_start__@plt>; add esp,0x8; pop ebx; ret
